{"version":3,"file":"engine.js","sourceRoot":"","sources":["../../engine/engine.ts"],"names":[],"mappings":"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","sourcesContent":["import { logging } from '@angular-devkit/core';\nimport * as fse from 'fs-extra';\nimport * as path from 'path';\n\nimport { Schema } from '../deploy/schema';\nimport { GHPages } from '../interfaces';\nimport { defaults } from './defaults';\n\nexport async function run(\n  dir: string,\n  options: Schema,\n  logger: logging.LoggerApi\n) {\n  options = prepareOptions(options, logger);\n\n  // this has to occur _after_ the monkeypatch of util.debuglog:\n  const ghpages = require('gh-pages');\n\n  // always clean the cache directory.\n  // avoids \"Error: Remote url mismatch.\"\n  if (options.dryRun) {\n    logger.info('Dry-run / SKIPPED: cleaning of the cache directory');\n  } else {\n    ghpages.clean();\n  }\n\n  await checkIfDistFolderExists(dir);\n  await createNotFoundPage(dir, options, logger);\n  await createCnameFile(dir, options, logger);\n  await publishViaGhPages(ghpages, dir, options, logger);\n\n  logger.info(\n    'ðŸš€ Successfully published via angular-cli-ghpages! Have a nice day!'\n  );\n}\n\nexport function prepareOptions(origOptions: Schema, logger: logging.LoggerApi) {\n  const options = {\n    ...defaults,\n    ...origOptions\n  };\n\n  if (origOptions.noSilent) {\n    options.silent = !origOptions.noSilent;\n\n    // monkeypatch util.debuglog to get all the extra information\n    // see https://stackoverflow.com/a/39129886\n    const util = require('util');\n    let debuglog = util.debuglog;\n    util.debuglog = set => {\n      if (set === 'gh-pages') {\n        return function() {\n          let message = util.format.apply(util, arguments);\n          logger.info(message);\n        };\n      }\n      return debuglog(set);\n    };\n  }\n\n  if (origOptions.noDotfiles) {\n    options.dotfiles = !origOptions.noDotfiles;\n  }\n\n  if (options.dryRun) {\n    logger.info('Dry-run: No changes are applied at all.');\n  }\n\n  if (options.name && options.email) {\n    options['user'] = {\n      name: options.name,\n      email: options.email\n    };\n  }\n\n  if (process.env.TRAVIS) {\n    options.message +=\n      ' -- ' +\n      process.env.TRAVIS_COMMIT_MESSAGE +\n      ' \\n\\n' +\n      'Triggered by commit: https://github.com/' +\n      process.env.TRAVIS_REPO_SLUG +\n      '/commit/' +\n      process.env.TRAVIS_COMMIT +\n      '\\n' +\n      'Travis CI build: https://travis-ci.org/' +\n      process.env.TRAVIS_REPO_SLUG +\n      '/builds/' +\n      process.env.TRAVIS_BUILD_ID;\n  }\n\n  if (process.env.CIRCLECI) {\n    options.message +=\n      '\\n\\n' +\n      'Triggered by commit: https://github.com/' +\n      process.env.CIRCLE_PROJECT_USERNAME +\n      '/' +\n      process.env.CIRCLE_PROJECT_REPONAME +\n      '/commit/' +\n      process.env.CIRCLE_SHA1 +\n      '\\n' +\n      'CircleCI build: ' +\n      process.env.CIRCLE_BUILD_URL;\n  }\n\n  if (process.env.GH_TOKEN && options.repo) {\n    options.repo = options.repo.replace(\n      'http://github.com/',\n      'http://GH_TOKEN@github.com/'\n    );\n    options.repo = options.repo.replace(\n      'https://github.com/',\n      'https://GH_TOKEN@github.com/'\n    );\n    options.repo = options.repo.replace('GH_TOKEN', process.env.GH_TOKEN);\n  }\n\n  return options;\n}\n\nasync function checkIfDistFolderExists(dir: string) {\n  if (await !fse.pathExists(dir)) {\n    throw new Error(\n      'Dist folder does not exist. Check the dir --dir parameter or build the project first!'\n    );\n  }\n}\n\nasync function createNotFoundPage(\n  dir: string,\n  options: Schema,\n  logger: logging.LoggerApi\n) {\n  if (options.dryRun) {\n    logger.info('Dry-run / SKIPPED: copying of index.html to 404.html');\n    return;\n  }\n\n  // Note:\n  // There is no guarantee that there will be an index.html file,\n  // as we may may specify a custom index file.\n  // TODO: respect setting in angular.json\n  const indexHtml = path.join(dir, 'index.html');\n  const notFoundPage = path.join(dir, '404.html');\n\n  try {\n    return await fse.copy(indexHtml, notFoundPage);\n  } catch (err) {\n    logger.info(\n      'index.html could not be copied to 404.html. This does not look like an angular-cli project?!'\n    );\n    logger.info(\n      '(Hint: are you sure that you have setup the directory correctly?)'\n    );\n    logger.debug('Diagnostic info: ' + err.message);\n    return;\n  }\n}\n\nasync function createCnameFile(\n  dir: string,\n  options: Schema,\n  logger: logging.LoggerApi\n) {\n  if (!options.cname) {\n    return;\n  }\n\n  const cnameFile = path.join(dir, 'CNAME');\n  if (options.dryRun) {\n    logger.info(\n      'Dry-run / SKIPPED: creating of CNAME file with content: ' + options.cname\n    );\n    return;\n  }\n\n  try {\n    await fse.writeFile(cnameFile, options.cname);\n    logger.info('CNAME file created');\n  } catch (err) {\n    throw new Error('CNAME file could not be created. ' + err.message);\n  }\n}\n\nasync function publishViaGhPages(\n  ghPages: GHPages,\n  dir: string,\n  options: Schema,\n  logger: logging.LoggerApi\n) {\n  if (options.dryRun) {\n    logger.info(\n      `Dry-run / SKIPPED: publishing folder \"${dir}\" with the following options: ` +\n        JSON.stringify(\n          {\n            dir: dir,\n            repo:\n              options.repo ||\n              'falsy: current working directory (which must be a git repo in this case) will be used to commit & push',\n            message: options.message,\n            branch: options.branch,\n            user:\n              options.user ||\n              'falsy: local or global git username & email properties will be taken',\n            silent:\n              options.silent || 'falsy: logging is in silent mode by default',\n            dotfiles:\n              options.dotfiles || 'falsy: dotfiles are included by default',\n            cname: options.cname || 'falsy: no CNAME file will be created'\n          },\n          null,\n          '  '\n        )\n    );\n    return;\n  }\n\n  // do NOT (!!) await ghPages.publish,\n  // the promise is implemented in such a way that it always succeeds â€“ even on errors!\n  return new Promise((resolve, reject) => {\n    ghPages.publish(dir, options, error => {\n      if (error) {\n        return reject(error);\n      }\n\n      resolve();\n    });\n  });\n}\n"]}